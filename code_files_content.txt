Filename: c:\Users\Marcos\dev\moneyprinter-v2\main.py
Content:
import argparse
from scripts.scraping_hltv import main as scrape_hltv_news, get_news_content, user_interaction
from scripts.scraping_dust2 import main as scrape_dust2_news
from scripts.script_generation import generate_script
from scripts.upload_to_notion import create_and_update_script
from scripts.twitch_clips import fetch_cs2_clips, search_games, fetch_and_download_top_clip, download_clip
import os
from dotenv import load_dotenv
from scripts.database_helper import create_database, mark_news_as_sent, is_news_sent, add_used_game_id, get_used_game_ids
from scripts.config import get_env_variable
import logging
from typing import Dict, List
import asyncio
from datetime import datetime, timedelta

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# Create handlers
console_handler = logging.StreamHandler()
file_handler = logging.FileHandler('app.log')

# Set levels for handlers
console_handler.setLevel(logging.INFO)
file_handler.setLevel(logging.INFO)

# Create formatter and add it to handlers
formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
console_handler.setFormatter(formatter)
file_handler.setFormatter(formatter)

# Get the logger and add the handlers
logger = logging.getLogger()
logger.addHandler(console_handler)
logger.addHandler(file_handler)

def format_uuid(uuid: str) -> str:
    """Formata um UUID removendo hífens."""
    return uuid.replace("-", "")

def get_started_at(period: str) -> str:
    """Retorna a data de início baseada no período."""
    now = datetime.utcnow()
    if period == "day":
        start = now - timedelta(days=1)
    elif period == "week":
        start = now - timedelta(weeks=1)
    elif period == "month":
        start = now - timedelta(days=30)
    elif period == "year":
        start = now - timedelta(days=365)
    elif period == "all":
        return None
    else:
        raise ValueError("Período inválido.")
    return start.isoformat() + 'Z'

async def main():
    """Função principal do script."""
    logger.info("Iniciando a função main")
    load_dotenv()
    logger.info("Variáveis de ambiente carregadas")
    create_database(db_name='news_sent.db', db_dir='./databases')
    logger.info("Banco de dados verificado/criado")

    parser = argparse.ArgumentParser(description="Script para coletar notícias e criar scripts para Notion.")
    parser.add_argument("--source", "--src", choices=["hltv", "dust2", "all"], help="Fonte das notícias: 'hltv', 'dust2' ou 'all'")
    parser.add_argument("--process", "--proc", choices=["all"], help="Processar todas as notícias automaticamente")
    parser.add_argument("--fetch-clips", action='store_true', help="Busca os clipes mais populares de CS2 na Twitch")
    parser.add_argument("--fetch-top-clip", action='store_true', help="Busca e baixa o clipe mais famoso de CS2 na Twitch")
    parser.add_argument("--game-id", type=str, help="ID do jogo na Twitch")
    parser.add_argument("--period", choices=["day", "week", "month", "year", "all"], default="week", help="Período dos clipes: 'day', 'week', 'month', 'year'")
    parser.add_argument("--min-duration", type=int, default=40, help="Duração mínima dos clipes em segundos")
    parser.add_argument("--max-duration", type=int, default=90, help="Duração máxima dos clipes em segundos")
    parser.add_argument("--search-game", type=str, help="Busca o ID de um jogo na Twitch")
    parser.add_argument("--list-games", action='store_true', help="Lista os IDs de jogos usados anteriormente")
    args = parser.parse_args()

    if not args.search_game and not args.source and not args.fetch_clips and not args.fetch_top_clip and not args.list_games:
        parser.error("A opção --source/--src é obrigatória, a menos que --search-game, --list-games, --fetch-clips ou --fetch-top-clip seja usado.")

    logger.info(f"Argumentos recebidos: {args}")

    try:
        token = os.getenv("NOTION_TOKEN")
        database_id = os.getenv("NOTION_DATABASE_ID")

        if not token or not database_id:
            raise EnvironmentError("As variáveis NOTION_TOKEN e NOTION_DATABASE_ID devem estar definidas para usar o Notion.")

        token = get_env_variable("NOTION_TOKEN", "Digite seu token de integração do Notion: ") if not token else token
        database_id = format_uuid(get_env_variable("NOTION_DATABASE_ID", "Digite o ID da base de dados do Notion: ")) if not database_id else format_uuid(database_id)

        client_id = os.getenv("TWITCH_CLIENT_ID")
        client_secret = os.getenv("TWITCH_CLIENT_SECRET")

        if args.search_game:
            logger.info(f"Buscando ID do jogo: {args.search_game}")
            games = await search_games(client_id, client_secret, args.search_game)
            logger.info(f"Resultados da busca: {games}")
            for game in games:
                print(f"ID: {game['id']}, Nome: {game['name']}")
                add_used_game_id(game['id'], game['name'])
            return

        if args.list_games:
            used_game_ids = get_used_game_ids()
            logger.info("Listando IDs de jogos usados anteriormente:")
            for game in used_game_ids:
                print(f"ID: {game['game_id']}, Nome: {game['game_name']}")
            return

        if args.fetch_clips:
            if not args.game_id:
                raise ValueError("O ID do jogo deve ser fornecido para buscar clipes.")
            started_at = get_started_at(args.period)
            logger.info("Iniciando a busca de clipes de CS2")
            clips = await fetch_cs2_clips(client_id, client_secret, args.game_id, period=args.period, num_clips=10, min_duration=args.min_duration, max_duration=args.max_duration, started_at=started_at)
            logger.info(f"{len(clips)} clipes de CS2 coletados")
            for i, clip in enumerate(clips, start=1):
                logger.info(f"Clip {i}: {clip['title']} - {clip['url']} - {clip['duration']}s - {clip['view_count']} views")
                print(f"{i}. {clip['title']} - {clip['url']} - {clip['duration']}s - {clip['view_count']} views")
            download_choice = input("Digite o número do clipe que deseja baixar ou 'all' para baixar todos: ")
            if download_choice.lower() == 'all':
                for clip in clips:
                    await download_clip(clip['id'], clip['title'], client_id, client_secret)
            else:
                try:
                    selected_index = int(download_choice) - 1
                    if 0 <= selected_index < len(clips):
                        selected_clip = clips[selected_index]
                        await download_clip(selected_clip['id'], selected_clip['title'], client_id, client_secret)
                    else:
                        logger.error("Número do clipe inválido.")
                except ValueError:
                    logger.error("Entrada inválida.")
            return

        if args.fetch_top_clip:
            if not args.game_id:
                raise ValueError("O ID do jogo deve ser fornecido para buscar clipes.")
            logger.info("Iniciando a busca do clipe mais famoso de CS2")
            await fetch_and_download_top_clip(client_id, client_secret, args.game_id, period=args.period, min_duration=args.min_duration, max_duration=args.max_duration)
            return

        if args.source in ['hltv', 'all']:
            logger.info("Coletando notícias do HLTV")
            news_data_hltv = scrape_hltv_news()
            process_news(news_data_hltv, token, database_id, args.process == "all")

        if args.source in ['dust2', 'all']:
            logger.info("Coletando notícias do Dust2")
            news_data_dust2 = scrape_dust2_news()
            process_news(news_data_dust2, token, database_id, args.process == "all")

    except Exception as e:
        logger.error(f"Erro durante a execução do script: {e}")
        print("Ocorreu um erro. Execute 'python main.py --help' para mais informações sobre como usar o script.")

def process_news(news_data, token, database_id, process_all=False):
    logger.info(f"Notícias coletadas: {len(news_data)} itens")
    
    if process_all:
        selected_news = news_data  # Processa todas as notícias automaticamente
    else:
        selected_news = user_interaction(news_data)  # Permite interação do usuário para selecionar as notícias

    for news in selected_news:
        if is_news_sent(news['guid'], db_name='news_sent.db', db_dir='./databases'):
            logger.info(f"Notícia '{news['title']}' já foi enviada para o Notion.")
            continue

        news['content'] = get_news_content(news['link'])
        script = generate_script(news['content'])
        logger.info(f"Script gerado para '{news['title']}':\n{script}")
        logger.info("="*50)

        create_and_update_script(token, database_id, script)
        mark_news_as_sent(news['guid'], db_name='news_sent.db', db_dir='./databases')

if __name__ == "__main__":
    logger.info("Executando o script principal diretamente")
    asyncio.run(main())
--------------------------------------------------------------------------------

Filename: c:\Users\Marcos\dev\moneyprinter-v2\manage.py
Content:
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'ProfitPortal.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()

--------------------------------------------------------------------------------

Filename: c:\Users\Marcos\dev\moneyprinter-v2\news\admin.py
Content:
from django.contrib import admin

# Register your models here.

--------------------------------------------------------------------------------

Filename: c:\Users\Marcos\dev\moneyprinter-v2\news\apps.py
Content:
from django.apps import AppConfig


class NewsConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'news'

--------------------------------------------------------------------------------

Filename: c:\Users\Marcos\dev\moneyprinter-v2\news\forms.py
Content:
from django import forms
from .models import APISettings
from django.contrib.auth.forms import AuthenticationForm, UserCreationForm
from django.contrib.auth.models import User

class APISettingsForm(forms.ModelForm):
    class Meta:
        model = APISettings
        fields = ['notion_token', 'notion_database_id', 'gemini_api_key', 'twitch_client_id', 'twitch_client_secret']
        widgets = {
            'notion_token': forms.TextInput(attrs={'class': 'form-control custom-textbox'}),
            'notion_database_id': forms.TextInput(attrs={'class': 'form-control custom-textbox'}),
            'gemini_api_key': forms.TextInput(attrs={'class': 'form-control custom-textbox'}),
            'twitch_client_id': forms.TextInput(attrs={'class': 'form-control custom-textbox'}),
            'twitch_client_secret': forms.TextInput(attrs={'class': 'form-control custom-textbox'}),
        }

class CustomAuthenticationForm(AuthenticationForm):
    username = forms.CharField(widget=forms.TextInput(attrs={'class': 'form-control'}))
    password = forms.CharField(widget=forms.PasswordInput(attrs={'class': 'form-control'}))

class RegisterForm(UserCreationForm):
    class Meta:
        model = User
        fields = ['username', 'password1', 'password2']
        widgets = {
            'username': forms.TextInput(attrs={'class': 'form-control'}),
            'password1': forms.PasswordInput(attrs={'class': 'form-control'}),
            'password2': forms.PasswordInput(attrs={'class': 'form-control'}),
        }

--------------------------------------------------------------------------------

Filename: c:\Users\Marcos\dev\moneyprinter-v2\news\models.py
Content:
from django.db import models

class APISettings(models.Model):
    notion_token = models.CharField(max_length=255, blank=True, null=True)
    notion_database_id = models.CharField(max_length=255, blank=True, null=True)
    gemini_api_key = models.CharField(max_length=255, blank=True, null=True)
    twitch_client_id = models.CharField(max_length=255, blank=True, null=True)
    twitch_client_secret = models.CharField(max_length=255, blank=True, null=True)

    def __str__(self):
        return "API Settings"

--------------------------------------------------------------------------------

Filename: c:\Users\Marcos\dev\moneyprinter-v2\news\tests.py
Content:
from django.test import TestCase

# Create your tests here.

--------------------------------------------------------------------------------

Filename: c:\Users\Marcos\dev\moneyprinter-v2\news\urls.py
Content:
from django.urls import path
from . import views

urlpatterns = [
    path('', views.home, name='home'),
    path('index/', views.index, name='index'),
    path('login/', views.login_view, name='login'),
    path('admin/', views.admin_view, name='admin'),
    path('register/', views.register_view, name='register'),
    path('fetch-news/', views.fetch_news, name='fetch_news'),
    path('list-news/', views.list_news, name='list_news'),
    path('process-news/', views.process_news, name='process_news'),
    path('settings/', views.settings, name='settings'),
    path('select-clips/', views.select_clips, name='select_clips'),
    path('fetch-clips/', views.fetch_clips, name='fetch_clips'),
    path('list-clips/', views.list_clips, name='list_clips'),
    path('download-clip/<str:clip_id>/', views.download_clip_view, name='download_clip'),
    path('list-game-ids/', views.list_game_ids, name='list_game_ids'),
    path('search-game-ids/', views.search_game_ids, name='search_game_ids'),
]
--------------------------------------------------------------------------------

Filename: c:\Users\Marcos\dev\moneyprinter-v2\news\views.py
Content:
from django.contrib.auth.decorators import login_required, user_passes_test
from django.shortcuts import render, redirect
from django.conf import settings
from .forms import CustomAuthenticationForm, RegisterForm, APISettingsForm
from django.contrib import messages
from django.contrib.auth import authenticate, login
from django.http import FileResponse, Http404
from .models import APISettings
from scripts.scraping_hltv import main as scrape_hltv_news, get_news_content, user_interaction
from scripts.scraping_dust2 import main as scrape_dust2_news
from scripts.script_generation import generate_script
from scripts.upload_to_notion import create_and_update_script
from scripts.database_helper import mark_news_as_sent, is_news_sent, add_used_game_id, get_used_game_ids
from scripts.twitch_clips import fetch_cs2_clips, search_games, download_clip_async, fetch_clip_download_url
import logging
import os
import asyncio
import aiofiles
import aiohttp

news_cache = []
clips_cache = []

def login_view(request):
    if request.method == 'POST':
        form = CustomAuthenticationForm(request, data=request.POST)
        if form.is_valid():
            username = form.cleaned_data.get('username')
            password = form.cleaned_data.get('password')
            user = authenticate(username=username, password=password)
            if user is not None:
                login(request, user)
                return redirect('index')
            else:
                messages.error(request, 'Usuário ou senha incorretos.')
        else:
            messages.error(request, 'Informações inválidas.')
    else:
        form = CustomAuthenticationForm()
    return render(request, 'news/login.html', {'form': form})

@login_required
def home(request):
    return redirect('index')

@login_required
def index(request):
    return render(request, 'news/index.html')

@login_required
def fetch_news(request):
    global news_cache
    if request.method == 'POST':
        source = request.POST.get('source')
        if source not in ['hltv', 'dust2']:
            messages.error(request, 'Fonte inválida! Por favor, selecione HLTV ou Dust2.')
            return redirect('index')

        if source == 'hltv':
            news_cache = scrape_hltv_news()
        else:
            news_cache = scrape_dust2_news()

        messages.success(request, 'Notícias capturadas com sucesso! Selecione as notícias para processar.')
        return redirect('list_news')
    else:
        return redirect('index')

@login_required
def list_news(request):
    return render(request, 'news/list_news.html', {'news': news_cache})

@login_required
def process_news(request):
    global news_cache
    if request.method == 'POST':
        selected_news_ids = request.POST.getlist('selected_news')
        selected_news = [news for news in news_cache if news['guid'] in selected_news_ids]

        settings = APISettings.objects.first()
        token = settings.notion_token
        database_id = settings.notion_database_id

        for news in selected_news:
            if is_news_sent(news['guid']):
                continue

            news['content'] = get_news_content(news['link'])
            script = generate_script(news['content'])
            create_and_update_script(token, database_id, script)
            mark_news_as_sent(news['guid'])

        messages.success(request, 'Notícias processadas e enviadas para o Notion com sucesso!')
        news_cache = [news for news in news_cache if news['guid'] not in selected_news_ids]  # Remove processed news from cache
        return redirect('list_news')
    else:
        return redirect('index')

@login_required
@user_passes_test(lambda u: u.is_superuser)
def admin_view(request):
    return render(request, 'news/admin.html')

@login_required
@user_passes_test(lambda u: u.is_superuser)
def register_view(request):
    if request.method == 'POST':
        form = RegisterForm(request.POST)
        if form.is_valid():
            form.save()
            messages.success(request, 'Usuário cadastrado com sucesso! Você já pode fazer login.')
            return redirect('login')
    else:
        form = RegisterForm()
    return render(request, 'news/register.html', {'form': form})

@login_required
def settings(request):
    if request.method == 'POST':
        form = APISettingsForm(request.POST, instance=APISettings.objects.first())
        if form.is_valid():
            form.save()
            messages.success(request, 'Configurações salvas com sucesso!')
            return redirect('settings')
    else:
        settings = APISettings.objects.first()
        form = APISettingsForm(instance=settings)
    
    return render(request, 'news/settings.html', {'form': form})

@login_required
def custom_page_not_found_view(request, exception):
    return redirect(settings.LOGIN_URL)

@login_required
def fetch_clips(request):
    global clips_cache
    if request.method == 'POST':
        game_id = request.POST.get('game_id')
        period = request.POST.get('period')
        min_duration = int(request.POST.get('min_duration', 40))
        max_duration = int(request.POST.get('max_duration', 90))
        
        settings = APISettings.objects.first()
        client_id = settings.twitch_client_id
        client_secret = settings.twitch_client_secret

        if not client_id or not client_secret:
            messages.error(request, 'As configurações da API da Twitch não estão definidas. Por favor, configure-as nas configurações.')
            return redirect('settings')

        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        clips_cache = loop.run_until_complete(fetch_cs2_clips(client_id, client_secret, game_id, period=period, num_clips=10, min_duration=min_duration, max_duration=max_duration))
        
        # Add the URL for embedding each clip
        for clip in clips_cache:
            clip['embed_url'] = f"https://clips.twitch.tv/embed?clip={clip['id']}&parent=localhost"
        
        # Store clips_cache in session
        request.session['clips_cache'] = clips_cache

        messages.success(request, 'Clipes capturados com sucesso!')
        return redirect('list_clips')
    return redirect('index')

@login_required
def list_clips(request):
    clips_cache = request.session.get('clips_cache', [])
    return render(request, 'news/list_clips.html', {'clips': clips_cache})

@login_required
def list_clips(request):
    return render(request, 'news/list_clips.html', {'clips': clips_cache})

@login_required
def list_game_ids(request):
    used_game_ids = get_used_game_ids()
    return render(request, 'news/list_game_ids.html', {'game_ids': used_game_ids})

@login_required
def search_game_ids(request):
    if request.method == 'POST':
        game_name = request.POST.get('game_name')
        settings = APISettings.objects.first()
        client_id = settings.twitch_client_id
        client_secret = settings.twitch_client_secret
        
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        games = loop.run_until_complete(search_games(client_id, client_secret, game_name))
        
        return render(request, 'news/search_game_ids.html', {'games': games, 'searched': True})
    return render(request, 'news/search_game_ids.html', {'searched': False})

@login_required
def select_clips(request):
    return render(request, 'news/select_clips.html')

async def download_clip_async(clip_id, clip_title, client_id, client_secret):
    """Baixa um clipe da Twitch usando o ID do clipe."""
    download_url = await fetch_clip_download_url(clip_id, client_id, client_secret)
    if not download_url:
        logging.error("URL de download não encontrada.")
        return None

    clips_dir = 'clips'
    os.makedirs(clips_dir, exist_ok=True)
    file_path = os.path.join(clips_dir, f"{clip_title}.mp4")

    async with aiohttp.ClientSession() as session:
        async with session.get(download_url) as response:
            if response.status == 200:
                async with aiofiles.open(file_path, "wb") as file:
                    while True:
                        chunk = await response.content.read(1024)
                        if not chunk:
                            break
                        await file.write(chunk)
                logging.info(f"Clip '{clip_title}' baixado com sucesso em '{file_path}'.")
                return file_path
            else:
                logging.error(f"Erro ao baixar o clipe: Status {response.status}")
                return None

@login_required
def download_clip_view(request, clip_id):
    # Fetch Twitch credentials
    settings_instance = APISettings.objects.first()
    client_id = settings_instance.twitch_client_id
    client_secret = settings_instance.twitch_client_secret

    if not client_id or not client_secret:
        raise Http404("Credenciais da Twitch não encontradas nas configurações.")

    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)

    # Fetching clip details from the session cache
    clips_cache = request.session.get('clips_cache', [])
    clip = next((clip for clip in clips_cache if clip['id'] == clip_id), None)

    if not clip:
        raise Http404("Clip não encontrado")

    file_path = loop.run_until_complete(download_clip_async(clip_id, clip['title'], client_id, client_secret))

    if file_path and os.path.exists(file_path):
        response = FileResponse(open(file_path, 'rb'), as_attachment=True, filename=os.path.basename(file_path))
        return response
    else:
        raise Http404("Clip não encontrado")
--------------------------------------------------------------------------------

Filename: c:\Users\Marcos\dev\moneyprinter-v2\news\__init__.py
Content:

--------------------------------------------------------------------------------

Filename: c:\Users\Marcos\dev\moneyprinter-v2\news\migrations\0001_initial.py
Content:
# Generated by Django 5.0.6 on 2024-06-03 18:33

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='APISettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notion_token', models.CharField(blank=True, max_length=255, null=True)),
                ('notion_database_id', models.CharField(blank=True, max_length=255, null=True)),
                ('gemini_api_key', models.CharField(blank=True, max_length=255, null=True)),
            ],
        ),
    ]

--------------------------------------------------------------------------------

Filename: c:\Users\Marcos\dev\moneyprinter-v2\news\migrations\0002_apisettings_twitch_client_id_and_more.py
Content:
# Generated by Django 5.0.6 on 2024-06-12 20:35

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('news', '0001_initial'),
    ]

    operations = [
        migrations.AddField(
            model_name='apisettings',
            name='twitch_client_id',
            field=models.CharField(blank=True, max_length=255, null=True),
        ),
        migrations.AddField(
            model_name='apisettings',
            name='twitch_client_secret',
            field=models.CharField(blank=True, max_length=255, null=True),
        ),
    ]

--------------------------------------------------------------------------------

Filename: c:\Users\Marcos\dev\moneyprinter-v2\news\migrations\__init__.py
Content:

--------------------------------------------------------------------------------

Filename: c:\Users\Marcos\dev\moneyprinter-v2\news\templates\news\admin.html
Content:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Administração</title>
    {% load static %}
    <link rel="stylesheet" href="{% static 'styles.css' %}">
</head>
<body>
    <header>
        <h1>Painel de Administração</h1>
    </header>
    <main>
        <p>Bem-vindo ao painel de administração.</p>
        <a href="{% url 'register' %}" class="button">Cadastrar Novo Usuário</a>
    </main>
</body>
</html>

--------------------------------------------------------------------------------

Filename: c:\Users\Marcos\dev\moneyprinter-v2\news\templates\news\base.html
Content:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>{% block title %}Profit Portal{% endblock %}</title>
    {% load static %}
    <link rel="stylesheet" href="{% static 'styles.css' %}">
</head>
<body class="animate-fade-in">
    <header class="transparent-header animate-fade-in">
        <div class="header-content">
            <nav>
                <ul>
                    <li><a href="{% url 'index' %}" class="animate-fade-in">Home</a></li>
                    <li><a href="{% url 'list_news' %}" class="animate-fade-in">Listar Notícias</a></li>
                    <li><a href="{% url 'settings' %}" class="animate-fade-in">Configurações</a></li>
                    {% if user.is_superuser %}
                        <li><a href="{% url 'register' %}" class="animate-fade-in">Cadastrar Usuário</a></li>
                    {% endif %}
                    <li><a href="{% url 'logout' %}" class="animate-fade-in">Sair</a></li>
                </ul>
            </nav>
        </div>
    </header>

    <main class="animate-fade-in"> 
        <div class="content-wrapper animate-fade-in">
            {% block content %}{% endblock %}
        </div>
    </main>

    <footer class="animate-fade-in">
        <p>© 2024 Profit Portal</p>
    </footer>

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="{% static 'scripts.js' %}"></script>
</body>
</html>

--------------------------------------------------------------------------------

Filename: c:\Users\Marcos\dev\moneyprinter-v2\news\templates\news\index.html
Content:
{% extends 'news/base.html' %}

{% block content %}
    <form method="POST" action="{% url 'fetch_news' %}">
        {% csrf_token %}
        <label for="source">Selecione a Fonte:</label>
        <select name="source" id="source" aria-labelledby="source">
            <option value="hltv">HLTV</option>
            <option value="dust2">Dust2</option>
        </select>
        <button type="submit">Capturar Notícias</button>
    </form>

    <a href="{% url 'select_clips' %}" class="button">Buscar Clipes de CS2</a>
    <a href="{% url 'list_game_ids' %}" class="button">Ver IDs de Jogos Salvos</a>
    <a href="{% url 'search_game_ids' %}" class="button">Buscar IDs de Jogos</a>
    <a href="{% url 'settings' %}" class="button">Configurações</a>

    {% if user.is_superuser %}
        <a href="{% url 'register' %}" class="button">Cadastrar Novo Usuário</a>
    {% endif %}
{% endblock %}

--------------------------------------------------------------------------------

Filename: c:\Users\Marcos\dev\moneyprinter-v2\news\templates\news\list_clips.html
Content:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Profit Portal - Listar clipes</title>
    {% load static %}
    <link rel="stylesheet" href="{% static 'styles.css' %}">
</head>
<body>
    <header>
        <img src="{% static 'images/logo.png' %}" alt="Logo" class="logo">
        <h1>Profit Portal - Listar clipes</h1>
    </header>
    <main class="container">
        <div class="card">
            <ul>
                {% for clip in clips %}
                <li>
                    <label for="clip_{{ clip.id }}"><strong>{{ clip.title }}</strong> - {{ clip.duration }}s - {{ clip.view_count }} views</label>
                    <div>
                        <a href="{{ clip.url }}" target="_blank" class="button">Visualizar no Twitch</a>
                        <a href="{% url 'download_clip' clip.id %}" class="button">Baixar Clip</a>
                    </div>
                </li>
                {% endfor %}
            </ul>
            <a href="{% url 'select_clips' %}" class="button">Voltar para Capturar Clipes</a>
        </div>
    </main>
    {% if messages %}
    <footer>
        <ul>
            {% for message in messages %}
            <li>{{ message }}</li>
            {% endfor %}
        </ul>
    </footer>
    {% endif %}
</body>
</html>

--------------------------------------------------------------------------------

Filename: c:\Users\Marcos\dev\moneyprinter-v2\news\templates\news\list_game_ids.html
Content:
{% extends 'news/base.html' %}

{% block title %}IDs de Jogos Salvos{% endblock %}

{% block content %}
    <h2>IDs de Jogos Salvos</h2>
    <ul>
        {% for game in game_ids %}
        <li>ID: {{ game.game_id }}, Nome: {{ game.game_name }}</li>
        {% endfor %}
    </ul>
    <a href="{% url 'index' %}" class="button">Voltar para Home</a>
{% endblock %}
--------------------------------------------------------------------------------

Filename: c:\Users\Marcos\dev\moneyprinter-v2\news\templates\news\list_news.html
Content:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Profit Portal - Listar notícias</title>
    {% load static %}
    <link rel="stylesheet" href="{% static 'styles.css' %}">
</head>
<body>
    <header>
        <img src="{% static 'images/logo.png' %}" alt="Logo" class="logo">
        <h1>Profit Portal - Listar notícias</h1>
    </header>
    <main class="container">
        <div class="card">
            <form method="post" action="{% url 'process_news' %}">
                {% csrf_token %}
                <ul>
                    {% for news in news %}
                    <li>
                        <input type="checkbox" name="selected_news" value="{{ news.guid }}" id="news_{{ news.guid }}">
                        <label for="news_{{ news.guid }}"><strong>{{ news.title }}</strong> - {{ news.pubDate }}</label>
                    </li>
                    {% endfor %}
                </ul>
                <button type="submit">Processar Notícias</button>
            </form>
            <a href="{% url 'index' %}" class="button">Voltar para Home</a>
        </div>
    </main>
    {% if messages %}
    <footer>
        <ul>
            {% for message in messages %}
            <li>{{ message }}</li>
            {% endfor %}
        </ul>
    </footer>
    {% endif %}
</body>
</html>

--------------------------------------------------------------------------------

Filename: c:\Users\Marcos\dev\moneyprinter-v2\news\templates\news\login.html
Content:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Login</title>
    {% load static %}
    <link rel="stylesheet" href="{% static 'styles.css' %}">
    <link rel="stylesheet" href="{% static 'login.css' %}">
</head>
<body>
    <div class="login-container">
        <div class="login-form animate-fade-in">
            <header>
                <h1>Login</h1>
            </header>
            <main>
                <form method="post">
                    {% csrf_token %}
                    {{ form.as_p }}
                    <button type="submit">Login</button>
                </form>
                {% if messages %}
                <ul class="messages">
                    {% for message in messages %}
                    <li>{{ message }}</li>
                    {% endfor %}
                </ul>
                {% endif %}
            </main>
            <footer>
                <p>© 2024 Profit Portal</p>
            </footer>
        </div>
    </div>
</body>
</html>

--------------------------------------------------------------------------------

Filename: c:\Users\Marcos\dev\moneyprinter-v2\news\templates\news\register.html
Content:
{% extends 'news/base.html' %}

{% block title %}Cadastro de Usuário{% endblock %}

{% block content %}
    <h2>Cadastro de Usuário</h2>

    <form method="post" class="register-form">
        {% csrf_token %}
        <div class="form-group">
            <label for="{{ form.username.id_for_label }}">{{ form.username.label }}</label>
            {{ form.username }}
            {% if form.username.errors %}
                <ul class="errorlist">
                    {% for error in form.username.errors %}
                        <li>{{ error }}</li>
                    {% endfor %}
                </ul>
            {% endif %}
        </div>
        <div class="form-group">
            <label for="{{ form.password1.id_for_label }}">{{ form.password1.label }}</label>
            {{ form.password1 }}
            {% if form.password1.errors %}
                <ul class="errorlist">
                    {% for error in form.password1.errors %}
                        <li>{{ error }}</li>
                    {% endfor %}
                </ul>
            {% endif %}
        </div>
        <div class="form-group">
            <label for="{{ form.password2.id_for_label }}">{{ form.password2.label }}</label>
            {{ form.password2 }}
            {% if form.password2.errors %}
                <ul class="errorlist">
                    {% for error in form.password2.errors %}
                        <li>{{ error }}</li>
                    {% endfor %}
                </ul>
            {% endif %}
        </div>
        <button type="submit" class="button">Cadastrar</button>
    </form>

    {% if messages %}
        <ul class="messagelist">
            {% for message in messages %}
                <li{% if message.tags %} class="{{ message.tags }}"{% endif %}>{{ message }}</li>
            {% endfor %}
        </ul>
    {% endif %}
{% endblock %}
--------------------------------------------------------------------------------

Filename: c:\Users\Marcos\dev\moneyprinter-v2\news\templates\news\search_game_ids.html
Content:
{% extends 'news/base.html' %}

{% block title %}Buscar IDs de Jogos{% endblock %}

{% block content %}
    <h2>Buscar IDs de Jogos</h2>
    <form method="POST" action="{% url 'search_game_ids' %}">
        {% csrf_token %}
        <div class="form-group">
            <label for="game_name">Nome do Jogo:</label>
            <input type="text" name="game_name" id="game_name" class="form-control" required>
        </div>
        <button type="submit" class="button">Buscar</button>
    </form>

    {% if searched %}
        <h3>Resultados da Busca</h3>
        <ul>
            {% for game in games %}
            <li>ID: {{ game.id }}, Nome: {{ game.name }}</li>
            {% endfor %}
        </ul>
    {% endif %}

    <a href="{% url 'index' %}" class="button">Voltar para Home</a>
{% endblock %}

--------------------------------------------------------------------------------

Filename: c:\Users\Marcos\dev\moneyprinter-v2\news\templates\news\select_clips.html
Content:
{% extends 'news/base.html' %}

{% block title %}Seleção de Clipes{% endblock %}

{% block content %}
    <h2>Buscar Clipes de CS2</h2>

    <form method="POST" action="{% url 'fetch_clips' %}">
        {% csrf_token %}
        <div class="form-group">
            <label for="game_id">ID do Jogo:</label>
            <input type="text" name="game_id" id="game_id" class="form-control" required>
        </div>
        
        <div class="form-group">
            <label for="period">Período:</label>
            <select name="period" id="period" class="form-control" required>
                <option value="day">Dia</option>
                <option value="week">Semana</option>
                <option value="month">Mês</option>
                <option value="year">Ano</option>
                <option value="all">Todos</option>
            </select>
        </div>
        
        <div class="form-group">
            <label for="min_duration">Duração Mínima:</label>
            <input type="number" name="min_duration" id="min_duration" class="form-control" value="40">
        </div>
        
        <div class="form-group">
            <label for="max_duration">Duração Máxima:</label>
            <input type="number" name="max_duration" id="max_duration" class="form-control" value="90">
        </div>
        
        <button type="submit" class="button">Buscar Clipes</button>
    </form>

    <a href="{% url 'index' %}" class="button">Voltar para Home</a>
{% endblock %}

--------------------------------------------------------------------------------

Filename: c:\Users\Marcos\dev\moneyprinter-v2\news\templates\news\settings.html
Content:
{% extends 'news/base.html' %}

{% block title %}Profit Portal - Configurações{% endblock %}

{% block content %}
    <h2>Configurações de API</h2>

    <form method="post" action="{% url 'settings' %}">
        {% csrf_token %}
        {{ form.as_p }}
        <button type="submit" class="button">Salvar Configurações</button>
    </form>

    <a href="{% url 'index' %}" class="button">Voltar para Home</a>
{% endblock %}

--------------------------------------------------------------------------------

Filename: c:\Users\Marcos\dev\moneyprinter-v2\ProfitPortal\asgi.py
Content:
"""
ASGI config for ProfitPortal project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'ProfitPortal.settings')

application = get_asgi_application()

--------------------------------------------------------------------------------

Filename: c:\Users\Marcos\dev\moneyprinter-v2\ProfitPortal\settings.py
Content:
"""
Django settings for ProfitPortal project.

Generated by 'django-admin startproject' using Django 5.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-xb-l4b6@-cftf5c(xsy^uawdt#o&9%3490&y(gzhv)(qg4(dh_'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'news',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'ProfitPortal.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'ProfitPortal.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [BASE_DIR / 'static']
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

LOGIN_URL = 'login'
LOGIN_REDIRECT_URL = 'index'
LOGOUT_REDIRECT_URL = 'login'

--------------------------------------------------------------------------------

Filename: c:\Users\Marcos\dev\moneyprinter-v2\ProfitPortal\urls.py
Content:
"""
URL configuration for ProfitPortal project.

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/5.0/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""
from django.contrib import admin
from django.urls import path, include
from django.conf.urls import handler404
from django.contrib.auth.views import LogoutView
from news import views

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('news.urls')),
    path('logout/', LogoutView.as_view(next_page='login'), name='logout'),  # Adicione esta linha
]

handler404 = views.custom_page_not_found_view
--------------------------------------------------------------------------------

Filename: c:\Users\Marcos\dev\moneyprinter-v2\ProfitPortal\wsgi.py
Content:
"""
WSGI config for ProfitPortal project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'ProfitPortal.settings')

application = get_wsgi_application()

--------------------------------------------------------------------------------

Filename: c:\Users\Marcos\dev\moneyprinter-v2\ProfitPortal\__init__.py
Content:

--------------------------------------------------------------------------------

Filename: c:\Users\Marcos\dev\moneyprinter-v2\scripts\config.py
Content:
from dotenv import load_dotenv
import os
import logging
from typing import Dict, Any

logging.basicConfig(level=logging.INFO)

def load_env():
    """Carrega variáveis de ambiente do arquivo .env."""
    load_dotenv()
    logging.info("Variáveis de ambiente carregadas.")

def get_env_variable(var_name: str, prompt: str) -> str:
    """Obtém uma variável de ambiente ou solicita ao usuário se não estiver definida."""
    current_value = os.getenv(var_name)
    if current_value:
        print(f"Valor atual de {var_name}: {current_value}")
        change = input(f"Deseja mudar {var_name}? (sim/nao): ").strip().lower()
        if change == 'sim':
            new_value = input(prompt).strip()
            os.environ[var_name] = new_value
            return new_value
        else:
            return current_value
    else:
        new_value = input(prompt).strip()
        os.environ[var_name] = new_value
        return new_value
--------------------------------------------------------------------------------

Filename: c:\Users\Marcos\dev\moneyprinter-v2\scripts\database_helper.py
Content:
import sqlite3
import logging
import os
from typing import Dict, List

logging.basicConfig(level=logging.INFO)

def create_database(db_name: str = 'news_sent.db', db_dir: str = './databases'):
    """Cria ou verifica se o banco de dados SQLite já existe."""
    os.makedirs(db_dir, exist_ok=True)
    db_path = os.path.join(db_dir, db_name)
    
    try:
        with sqlite3.connect(db_path) as conn:
            cursor = conn.cursor()
            cursor.execute('''CREATE TABLE IF NOT EXISTS news_sent
                              (id INTEGER PRIMARY KEY, guid TEXT UNIQUE)''')
            cursor.execute('''CREATE TABLE IF NOT EXISTS used_game_ids
                              (id INTEGER PRIMARY KEY, game_id TEXT UNIQUE, game_name TEXT)''')
            conn.commit()
        logging.info(f"Banco de dados criado ou verificado com sucesso: {db_path}")
    except Exception as e:
        logging.error(f"Erro ao criar/verificar o banco de dados: {e}")

def mark_news_as_sent(guid: str, db_name: str = 'news_sent.db', db_dir: str = './databases'):
    """Marca a notícia com o GUID fornecido como enviada no banco de dados."""
    db_path = os.path.join(db_dir, db_name)
    
    try:
        with sqlite3.connect(db_path) as conn:
            cursor = conn.cursor()
            cursor.execute("INSERT OR IGNORE INTO news_sent (guid) VALUES (?)", (guid,))
            conn.commit()
        logging.info(f"Notícia com GUID {guid} marcada como enviada.")
    except Exception as e:
        logging.error(f"Erro ao marcar notícia como enviada: {e}")

def is_news_sent(guid: str, db_name: str = 'news_sent.db', db_dir: str = './databases') -> bool:
    """Verifica se a notícia com o GUID fornecido já foi enviada."""
    db_path = os.path.join(db_dir, db_name)
    
    try:
        with sqlite3.connect(db_path) as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT * FROM news_sent WHERE guid=?", (guid,))
            result = cursor.fetchone()
        return result is not None
    except Exception as e:
        logging.error(f"Erro ao verificar se a notícia foi enviada: {e}")
        return False

def add_used_game_id(game_id: str, game_name: str, db_name: str = 'news_sent.db', db_dir: str = './databases'):
    """Adiciona um ID de jogo usado ao banco de dados."""
    db_path = os.path.join(db_dir, db_name)
    
    try:
        with sqlite3.connect(db_path) as conn:
            cursor = conn.cursor()
            cursor.execute("INSERT OR IGNORE INTO used_game_ids (game_id, game_name) VALUES (?, ?)", (game_id, game_name))
            conn.commit()
        logging.info(f"ID do jogo {game_id} ({game_name}) adicionado ao banco de dados.")
    except Exception as e:
        logging.error(f"Erro ao adicionar ID do jogo ao banco de dados: {e}")

def get_used_game_ids(db_name: str = 'news_sent.db', db_dir: str = './databases') -> List[Dict[str, str]]:
    """Obtém todos os IDs de jogos usados do banco de dados."""
    db_path = os.path.join(db_dir, db_name)
    
    try:
        with sqlite3.connect(db_path) as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT game_id, game_name FROM used_game_ids")
            rows = cursor.fetchall()
            return [{"game_id": row[0], "game_name": row[1]} for row in rows]
    except Exception as e:
        logging.error(f"Erro ao obter IDs de jogos usados do banco de dados: {e}")
        return []

--------------------------------------------------------------------------------

Filename: c:\Users\Marcos\dev\moneyprinter-v2\scripts\scraping_dust2.py
Content:
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service as ChromeService
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.chrome import ChromeDriverManager
import feedparser
import logging
from typing import Dict, List

logging.basicConfig(level=logging.INFO)

def accept_cookies(driver: webdriver.Chrome):
    """Aceita cookies em um site."""
    try:
        cookie_button = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.XPATH, '//*[@id="CybotCookiebotDialogBodyLevelButtonLevelOptinAllowAll"]'))
        )
        cookie_button.click()
    except Exception as e:
        logging.error(f"Erro ao aceitar cookies: {e}")

def get_news_content(news_url: str) -> str:
    """Coleta o conteúdo de uma notícia."""
    driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()))
    driver.get(news_url)

    try:
        accept_cookies(driver)
        WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.TAG_NAME, 'p'))
        )
        paragraphs = driver.find_elements(By.TAG_NAME, 'p')
        content = ' '.join([p.text for p in paragraphs])
        content = content.encode('ascii', 'ignore').decode('ascii')
        logging.info(f"Conteúdo coletado da notícia: {news_url}")
    except Exception as e:
        logging.error(f"Erro ao coletar conteúdo da notícia: {e}")
        content = "N/A"
    finally:
        driver.quit()

    return content

def fetch_dust2_news() -> List[Dict]:
    """Coleta notícias do Dust2."""
    rss_url = "https://www.dust2.com.br/rss"
    feed = feedparser.parse(rss_url)

    news_items = []
    for entry in feed.entries:
        news_item = {
            "title": entry.title,
            "description": entry.description,
            "link": entry.link,
            "guid": entry.guid,
            "pubDate": entry.published,
            "media_content": entry.get('media_content', [{}])[0].get('url', None)
        }
        news_items.append(news_item)

    logging.info(f"{len(news_items)} notícias coletadas do Dust2.")
    return news_items

def user_interaction(news_links: List[Dict]) -> List[Dict]:
    """Permite ao usuário selecionar as notícias desejadas."""
    print("Links das notícias disponíveis:")
    for i, news in enumerate(news_links):
        print(f"{i + 1}. {news['title']} ({news['pubDate']}) - {news['link']}")

    choice = input("Digite o número da notícia que você deseja coletar (ou 'all' para todas): ")

    if choice.lower() == 'all':
        return news_links
    else:
        try:
            selected_indices = [int(i) - 1 for i in choice.split()]
            return [news_links[i] for i in selected_indices]
        except ValueError:
            logging.error("Entrada inválida. Por favor, digite números separados por espaços ou 'all'.")
            return []

def main():
    """Coleta notícias do Dust2."""
    news_list = fetch_dust2_news()
    return news_list

if __name__ == "__main__":
    main()
--------------------------------------------------------------------------------

Filename: c:\Users\Marcos\dev\moneyprinter-v2\scripts\scraping_hltv.py
Content:
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service as ChromeService
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.chrome import ChromeDriverManager
import feedparser
import logging
from typing import Dict, List

logging.basicConfig(level=logging.INFO)

def accept_cookies(driver: webdriver.Chrome):
    """Aceita cookies em um site."""
    try:
        cookie_button = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.XPATH, '//*[@id="CybotCookiebotDialogBodyLevelButtonLevelOptinAllowAll"]'))
        )
        cookie_button.click()
    except Exception as e:
        logging.error(f"Erro ao aceitar cookies: {e}")

def get_news_content(news_url: str) -> str:
    """Coleta o conteúdo de uma notícia."""
    driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()))
    driver.get(news_url)

    try:
        accept_cookies(driver)
        WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.TAG_NAME, 'p'))
        )
        paragraphs = driver.find_elements(By.TAG_NAME, 'p')
        content = ' '.join([p.text for p in paragraphs])
        content = content.encode('ascii', 'ignore').decode('ascii')
        logging.info(f"Conteúdo coletado da notícia: {news_url}")
    except Exception as e:
        logging.error(f"Erro ao coletar conteúdo da notícia: {e}")
        content = "N/A"
    finally:
        driver.quit()

    return content

def fetch_hltv_news() -> List[Dict]:
    """Coleta notícias do HLTV."""
    rss_url = "https://www.hltv.org/rss/news"
    feed = feedparser.parse(rss_url)

    news_items = []
    for entry in feed.entries:
        news_item = {
            "title": entry.title,
            "description": entry.description,
            "link": entry.link,
            "guid": entry.guid,
            "pubDate": entry.published,
            "media_content": entry.get('media_content', [{}])[0].get('url', None)
        }
        news_items.append(news_item)

    logging.info(f"{len(news_items)} notícias coletadas do HLTV.")
    return news_items

def user_interaction(news_links: List[Dict]) -> List[Dict]:
    """Permite ao usuário selecionar as notícias desejadas."""
    print("Links das notícias disponíveis:")
    for i, news in enumerate(news_links):
        print(f"{i + 1}. {news['title']} ({news['pubDate']}) - {news['link']}")

    choice = input("Digite o número da notícia que você deseja coletar (ou 'all' para todas): ")

    if choice.lower() == 'all':
        return news_links
    else:
        try:
            selected_indices = [int(i) - 1 for i in choice.split()]
            return [news_links[i] for i in selected_indices]
        except ValueError:
            logging.error("Entrada inválida. Por favor, digite números separados por espaços ou 'all'.")
            return []

def main():
    """Coleta notícias do HLTV."""
    news_list = fetch_hltv_news()
    return news_list

if __name__ == "__main__":
    main()
--------------------------------------------------------------------------------

Filename: c:\Users\Marcos\dev\moneyprinter-v2\scripts\script_generation.py
Content:
import os
import google.generativeai as genai
import logging
from typing import Dict, Any

logging.basicConfig(level=logging.INFO)

def configure_api():
    """Configura a API do Google Generative AI."""
    try:
        os.environ["GEMINI_API_KEY"] = "AIzaSyD-fwsx8o7mGgZa5BYIt9uKOAPIXCA47qU"
        genai.configure(api_key=os.environ["GEMINI_API_KEY"])
        logging.info("API do Google Generative AI configurada com sucesso.")
    except Exception as e:
        logging.error(f"Erro ao configurar a API do Google Generative AI: {e}")

# Configurações de geração de texto
generation_config = {
    "temperature": 1,
    "top_p": 0.95,
    "top_k": 64,
    "max_output_tokens": 8192,
    "response_mime_type": "text/plain",
}

# Configurações de segurança
safety_settings = [
    {"category": "HARM_CATEGORY_HARASSMENT", "threshold": "BLOCK_MEDIUM_AND_ABOVE"},
    {"category": "HARM_CATEGORY_HATE_SPEECH", "threshold": "BLOCK_MEDIUM_AND_ABOVE"},
    {"category": "HARM_CATEGORY_SEXUALLY_EXPLICIT", "threshold": "BLOCK_MEDIUM_AND_ABOVE"},
    {"category": "HARM_CATEGORY_DANGEROUS_CONTENT", "threshold": "BLOCK_MEDIUM_AND_ABOVE"},
]

# Instruções do sistema para o modelo
system_instruction = (
    "Aja como um Jornalista de Counter-Strike com mais de 20 anos de experiência e completamente apaixonado pelo jogo e pelas competições. "
    "Seu trabalho será criar vídeos de notícias de Counter-Strike baseados em artigos disponibilizados para você. O seu principal objetivo é conseguir prender os espectadores nas notícias. "
    "Você faz parte de um Canal chamado RouundEco. Utilize uma linguagem que o público do mundo de Counter-Strike entenderia, mas sem exagerar.\n\n"
    "O roteiro deve incluir os seguintes elementos:\n\n"
    "Roteiro para Vídeo Curto\n"
    "Tempo total: Tempo estimado para o vídeo de acordo com o roteiro e voice over. (O vídeo não deve exceder 1 minuto.)\n\n"
    "Objetivo: Informar sobre o artigo.\n\n"
    "Storyboard e Timing\n"
    "Abertura (tempo estimado)\n"
    "Visual: Descreva o que deve aparecer na tela durante a abertura.\n"
    "Voice Over: Escreva o que deve ser falado durante a abertura. (ESSENCIAL: NÃO ESQUECER DE FORNECER O VOICE OVER PARA CADA SEGMENTO)\n"
    "(3-15 segundos)\n"
    "Visual: Descreva o que deve aparecer na tela durante este intervalo.\n"
    "Voice Over: Escreva o que deve ser falado durante este intervalo. (ESSENCIAL: NÃO ESQUECER DE FORNECER O VOICE OVER PARA CADA SEGMENTO)\n"
    "Texto na tela: Descreva o texto que deve aparecer na tela (usar com cuidado).\n"
    "Links relevantes AI:\n"
    "Link - O que o link descreve - https://exemple.com\n"
    "Voice Over Completo: Escreva o que deve ser falado durante o vídeo, detalhando cada segmento para ser utilizado por ferramentas de voz generativa. (ESSENCIAL: NÃO ESQUECER DE FORNECER O VOICE OVER PARA CADA SEGMENTO)\n\n"
    "TAGS: Liste as tags que devem ser utilizadas, garantindo que sejam adequadas para YouTube e TikTok. deve conter #\n\n"
    "Descrição: Forneça uma descrição concisa e cativante para o vídeo que será usada nas plataformas de vídeo utilizando a fonte da notícia.\n\n"
    "Observações:\n\n"
    "Detalhe o que devemos levar em consideração no vídeo.\n"
    "Informações Omitidas: Liste todas as informações que não foram transmitidas no Voice Over e StoryBoard que existem no artigo.\n\n"
    "Informações Adicionais: Liste todas as informações que não existem no artigo que poderiam ser transmitidas."
)

def generate_script(article: str) -> str:
    """Gera um script para vídeo a partir de um artigo."""
    configure_api()
    try:
        model = genai.GenerativeModel(
            model_name="gemini-1.5-pro",
            safety_settings=safety_settings,
            generation_config=generation_config,
            system_instruction=system_instruction,
        )
        chat_session = model.start_chat(
            history=[
                {
                    "role": "user",
                    "parts": [article]
                }
            ]
        )
        response = chat_session.send_message(article)
        logging.info("Script gerado com sucesso.")
        return response.text
    except Exception as e:
        logging.error(f"Erro ao gerar o script: {e}")
        return "Erro ao gerar o script."
--------------------------------------------------------------------------------

Filename: c:\Users\Marcos\dev\moneyprinter-v2\scripts\twitch_clips.py
Content:
import aiohttp
import aiofiles
import logging
import os
from datetime import datetime, timedelta

logging.basicConfig(level=logging.INFO)

async def search_games(client_id, client_secret, game_name):
    """Busca jogos na Twitch pelo nome."""
    auth_url = 'https://id.twitch.tv/oauth2/token'
    auth_params = {
        'client_id': client_id,
        'client_secret': client_secret,
        'grant_type': 'client_credentials'
    }
    async with aiohttp.ClientSession() as session:
        async with session.post(auth_url, params=auth_params) as response:
            auth_data = await response.json()
            access_token = auth_data['access_token']
    
    search_url = 'https://api.twitch.tv/helix/games'
    headers = {
        'Client-ID': client_id,
        'Authorization': f'Bearer {access_token}'
    }
    params = {
        'name': game_name
    }
    async with aiohttp.ClientSession() as session:
        async with session.get(search_url, headers=headers, params=params) as response:
            data = await response.json()
            return data['data']

async def fetch_cs2_clips(client_id, client_secret, game_id, period='week', num_clips=10, min_duration=40, max_duration=90, started_at=None):
    """Busca os clipes mais populares de um jogo na Twitch."""
    auth_url = 'https://id.twitch.tv/oauth2/token'
    auth_params = {
        'client_id': client_id,
        'client_secret': client_secret,
        'grant_type': 'client_credentials'
    }
    async with aiohttp.ClientSession() as session:
        async with session.post(auth_url, params=auth_params) as response:
            auth_data = await response.json()
            access_token = auth_data['access_token']
    
    clips_url = 'https://api.twitch.tv/helix/clips'
    headers = {
        'Client-ID': client_id,
        'Authorization': f'Bearer {access_token}'
    }
    params = {
        'game_id': game_id,
        'first': num_clips,
        'started_at': started_at
    }

    logging.info(f"Fetching clips with params: {params}")

    async with aiohttp.ClientSession() as session:
        async with session.get(clips_url, headers=headers, params=params) as response:
            data = await response.json()
            logging.info(f"Response from Twitch API: {data}")
            clips = []
            for clip in data.get('data', []):
                duration = float(clip.get('duration'))
                if min_duration <= duration <= max_duration:
                    clips.append({
                        'id': clip['id'],
                        'title': clip['title'],
                        'url': clip['url'],
                        'thumbnail_url': clip['thumbnail_url'],
                        'duration': duration,
                        'view_count': clip['view_count'],
                        'download_url': clip['url']  # URL para download do clipe
                    })
            return clips

async def fetch_clip_download_url(clip_id, client_id, client_secret):
    """Obtém a URL de download de um clipe da Twitch."""
    auth_url = 'https://id.twitch.tv/oauth2/token'
    auth_params = {
        'client_id': client_id,
        'client_secret': client_secret,
        'grant_type': 'client_credentials'
    }
    async with aiohttp.ClientSession() as session:
        async with session.post(auth_url, params=auth_params) as response:
            auth_data = await response.json()
            access_token = auth_data['access_token']

    clip_url = f'https://api.twitch.tv/helix/clips?id={clip_id}'
    headers = {
        'Client-ID': client_id,
        'Authorization': f'Bearer {access_token}'
    }
    async with aiohttp.ClientSession() as session:
        async with session.get(clip_url, headers=headers) as response:
            data = await response.json()
            clip_data = data.get('data', [])
            if clip_data:
                return clip_data[0]['thumbnail_url'].split('-preview-')[0] + '.mp4'
            else:
                return None

async def download_clip(clip_id, clip_title, client_id, client_secret):
    """Baixa um clipe da Twitch usando o ID do clipe."""
    download_url = await fetch_clip_download_url(clip_id, client_id, client_secret)
    if not download_url:
        logging.error("URL de download não encontrada.")
        return

    clips_dir = 'clips'
    os.makedirs(clips_dir, exist_ok=True)
    file_path = os.path.join(clips_dir, f"{clip_title}.mp4")

    async with aiohttp.ClientSession() as session:
        async with session.get(download_url) as response:
            if response.status == 200:
                async with aiofiles.open(file_path, "wb") as file:
                    while True:
                        chunk = await response.content.read(1024)
                        if not chunk:
                            break
                        await file.write(chunk)
                logging.info(f"Clip '{clip_title}' baixado com sucesso em '{file_path}'.")
            else:
                logging.error(f"Erro ao baixar o clipe: Status {response.status}")

async def fetch_and_download_top_clip(client_id, client_secret, game_id, period='week', min_duration=40, max_duration=90):
    """Busca e baixa o clipe mais famoso."""
    # Primeiro, buscar o clipe mais famoso independentemente da duração
    auth_url = 'https://id.twitch.tv/oauth2/token'
    auth_params = {
        'client_id': client_id,
        'client_secret': client_secret,
        'grant_type': 'client_credentials'
    }
    async with aiohttp.ClientSession() as session:
        async with session.post(auth_url, params=auth_params) as response:
            auth_data = await response.json()
            access_token = auth_data['access_token']
    
    clips_url = 'https://api.twitch.tv/helix/clips'
    headers = {
        'Client-ID': client_id,
        'Authorization': f'Bearer {access_token}'
    }
    params = {
        'game_id': game_id,
        'first': 1,
        'started_at': (datetime.utcnow() - timedelta(days=7)).isoformat() + 'Z' if period == 'week' else None
    }

    logging.info(f"Fetching top clip with params: {params}")

    async with aiohttp.ClientSession() as session:
        async with session.get(clips_url, headers=headers, params=params) as response:
            data = await response.json()
            logging.info(f"Response from Twitch API: {data}")
            clips = data.get('data', [])
            if clips:
                top_clip = clips[0]
                await download_clip(top_clip['id'], top_clip['title'], client_id, client_secret)
                logging.info(f"Top clip '{top_clip['title']}' com duração de {top_clip['duration']} segundos baixado.")
            else:
                logging.info("Nenhum clipe encontrado com os critérios especificados.")

async def download_clip_async(clip_id, clip_title, client_id, client_secret):
    """Baixa um clipe da Twitch usando o ID do clipe."""
    download_url = await fetch_clip_download_url(clip_id, client_id, client_secret)
    if not download_url:
        logging.error("URL de download não encontrada.")
        return None

    clips_dir = 'clips'
    os.makedirs(clips_dir, exist_ok=True)
    file_path = os.path.join(clips_dir, f"{clip_title}.mp4")

    async with aiohttp.ClientSession() as session:
        async with session.get(download_url) as response:
            if response.status == 200:
                async with aiofiles.open(file_path, "wb") as file:
                    while True:
                        chunk = await response.content.read(1024)
                        if not chunk:
                            break
                        await file.write(chunk)
                logging.info(f"Clip '{clip_title}' baixado com sucesso em '{file_path}'.")
                return file_path
            else:
                logging.error(f"Erro ao baixar o clipe: Status {response.status}")
                return None
            
--------------------------------------------------------------------------------

Filename: c:\Users\Marcos\dev\moneyprinter-v2\scripts\upload_to_notion.py
Content:
from notion_client import Client
import logging

logging.basicConfig(level=logging.INFO)

def split_text(text, max_length):
    """Divide o texto em partes de no máximo max_length caracteres, mantendo quebras de linha."""
    paragraphs = text.split('\n')
    parts = []
    current_part = ""

    for paragraph in paragraphs:
        if len(current_part) + len(paragraph) + 1 > max_length:
            parts.append(current_part)
            current_part = paragraph
        else:
            if current_part:
                current_part += '\n'
            current_part += paragraph

    if current_part:
        parts.append(current_part)
    
    return parts

def create_and_update_script(token, database_id, script):
    notion = Client(auth=token)

    # Dividir o script em partes de 1500 caracteres
    script_parts = split_text(script, 1500)

    # Extrair a primeira linha do script para o título
    title = script.split('\n')[0] if script else "Sem Título"

    # Criar a página
    try:
        response = notion.pages.create(
            parent={"database_id": database_id},
            properties={
                "title": {
                    "title": [
                        {
                            "type": "text",
                            "text": {
                                "content": title
                            }
                        }
                    ]
                }
            },
            children=[
                {
                    "object": "block",
                    "type": "paragraph",
                    "paragraph": {
                        "rich_text": [
                            {
                                "type": "text",
                                "text": {
                                    "content": script_parts[0]
                                }
                            }
                        ]
                    }
                }
            ]
        )
        page_id = response['id']
        logging.info(f"Página do script '{title}' criada com sucesso: {response}")
    except Exception as e:
        logging.error(f"Ocorreu um erro ao criar a página: {e}")
        return

    # Atualizar a página com as partes restantes
    for part in script_parts[1:]:
        try:
            response = notion.blocks.children.append(
                block_id=page_id,
                children=[
                    {
                        "object": "block",
                        "type": "paragraph",
                        "paragraph": {
                            "rich_text": [
                                {
                                    "type": "text",
                                    "text": {
                                        "content": part
                                    }
                                }
                            ]
                        }
                    }
                ]
            )
            logging.info(f"Parte do script adicionada com sucesso: {response}")
        except Exception as e:
            logging.error(f"Ocorreu um erro ao atualizar a página: {e}")


--------------------------------------------------------------------------------

Filename: c:\Users\Marcos\dev\moneyprinter-v2\static\scripts.js
Content:
document.addEventListener("DOMContentLoaded", function() {
    const darkModeToggle = document.getElementById("dark-mode-toggle");
    const icon = darkModeToggle.querySelector('i');

    // Verifica o modo atual ao carregar a página
    if (document.body.classList.contains('light-mode')) {
        icon.classList.remove('fa-sun');
        icon.classList.add('fa-moon');
    } else {
        icon.classList.remove('fa-moon');
        icon.classList.add('fa-sun');
    }

    darkModeToggle.addEventListener("click", function() {
        document.body.classList.toggle("light-mode");

        if (document.body.classList.contains('light-mode')) {
            icon.classList.remove('fa-sun');
            icon.classList.add('fa-moon');
        } else {
            icon.classList.remove('fa-moon');
            icon.classList.add('fa-sun');
        }
    });
});

--------------------------------------------------------------------------------

Filename: c:\Users\Marcos\dev\moneyprinter-v2\static\styles.css
Content:
body {
    font-family: 'Helvetica Neue', Arial, sans-serif;
    background-color: #121212;
    color: #FFFFFF;
    margin: 0;
    padding: 0;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    min-height: 100vh;
    text-align: center;
    transition: background-color 0.5s, color 0.5s;
    background-image: url("/static/images/nature-before-night-time.jpg"); /* Substitua pelo caminho da sua imagem */
    background-size: cover;
    background-position: center;
    color: #333;
    padding-top: 80px; /* Ajuste este valor de acordo com a altura do seu cabeçalho */ 
}

.animate-fade-in {
  animation: fadeIn 1.5s ease-in-out;
}

@keyframes fadeIn {
  from {
      opacity: 0;
      transform: translateY(-20px);
  }
  to {
      opacity: 1;
      transform: translateY(0);
  }
}

body.light-mode {
    background-color: #FFFFFF;
    color: #000000;
}

header, footer { /* Remova 'main' daqui */
    width: 100%;
    max-width: 12000px;
    padding: 20px;
    box-sizing: border-box;
    display: flex;
    flex-direction: column;
    align-items: center;
}

h1 {
color: #1DB954;
font-size: 3rem;
margin-bottom: 20px;
text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
}

.content-wrapper {
display: flex;
flex-direction: column;
align-items: center;
background-color: #dbdbdb0d;
padding: 20px;
border-radius: 10px;
}

form {
margin-bottom: 20px;
display: flex;
flex-direction: column;
align-items: center;
}

label,
select,
input[type="text"],
input[type="password"],
button {
margin: 10px 0;
padding: 10px;
font-size: 1rem;
border: none;
border-radius: 5px;
width: 100%;
max-width: 300px;
}

select,
input[type="text"],
input[type="password"] {
background-color: #dbdbdb36;
color: #FFFFFF;
border: 3px solid #00000052;
}

body.light-mode select,
body.light-mode input[type="text"],
body.light-mode input[type="password"] {
background-color: #FFFFFF;
color: #000000;
border: 1px solid #ddd;
}

button {
background-color: #1DB954;
color: #FFFFFF;
border: none;
cursor: pointer;
transition: background-color 0.3s ease, transform 0.3s ease;
box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

button:hover {
background-color: #1AA34A;
transform: scale(1.05);
}

ul {
list-style-type: none;
padding: 0;
}

li {
padding: 10px;
background: #ffffff00;
margin-bottom: 5px;
border: none;
border-radius: 5px;
box-shadow: 0 2px 4px rgba(0, 0, 0, 0);
}

li input[type="checkbox"]:checked+label {
background-color: #1DB954;
color: #121212;
}

body.light-mode li {
background: #FFFFFF;
color: #000000;
border: 1px solid #ddd;
}

.logo {
width: 50px;
height: auto;
margin-bottom: 20px;
animation: fadeIn 2s ease-in-out;
}

#dark-mode-toggle {
background: none;
border: none;
cursor: pointer;
font-size: 24px;
color: #1DB954;
margin-top: 20px;
box-shadow: none;
/* Remover sombra */
transition: color 0.3s ease, transform 0.3s ease;
/* Adiciona transição para cor e transformação */
}

body.light-mode #dark-mode-toggle {
color: #000000;
}

#dark-mode-toggle:hover {
transform: scale(1.05);
/* Adiciona transformação ao passar o mouse */
}

@keyframes fadeIn {
from {
  opacity: 0;
}

to {
  opacity: 1;
}
}

@media (max-width: 768px) {

header,
main,
footer {
  padding: 10px;
}

h1 {
  font-size: 2.5rem;
}

form {
  width: 90%;
}

.logo {
  width: 150px;
}
}

.custom-textbox {
width: 300px;
padding: 10px;
border: 1px solid #ccc;
border-radius: 4px;
font-size: 16px;
transition: border-color 0.3s, box-shadow 0.3s;
}

.custom-textbox:focus {
border-color: #1DB954;
/* Mudar a cor da borda para verde */
box-shadow: 0 0 5px rgba(29, 185, 84, 0.5);
/* Ajustar a sombra */
outline: none;
}

.custom-textbox::placeholder {
color: #888;
font-style: italic;
}

.button {
background-color: #b93f1d;
color: #FFFFFF;
padding: 10px 20px;
border-radius: 5px;
text-decoration: none;
display: inline-block;
margin-top: 10px;
transition: background-color 0.3s ease, transform 0.3s ease;
}

.button:hover {
background-color: #a32f1a;
transform: scale(1.05);
}

.transparent-header {
position: fixed;
top: 0;
left: 0;
width: 100%;
background-color: transparent;
/* Torna o fundo transparente */
padding: 20px;
z-index: 100;
backdrop-filter: blur(5px);
/* Adiciona um efeito de blur ao fundo */
}

.header-content {
display: flex;
justify-content: space-between;
align-items: center;
max-width: 1200px;
margin: 0 auto;
}

.transparent-header h1 {
color: white;
/* Cor do título */
margin: 0;
font-size: 1.8em;
}

.transparent-header nav ul {
list-style: none;
margin: 0;
padding: 0;
display: flex;
}

.transparent-header nav li {
margin-left: 30px;
}

.transparent-header nav a {
text-decoration: none;
color: white;
background-color: transparent;
border: none;
padding: 10px 20px;
/* Adiciona uma transição suave na cor do link */
}

.transparent-header nav a:hover {
color: #ddd0;
/* Cor do link quando o mouse passa por cima */
}

/* Ajuste para o main */
main {
padding-top: 80px; /* Ajuste este valor de acordo com a altura do seu cabeçalho */
}

--------------------------------------------------------------------------------

Filename: c:\Users\Marcos\dev\moneyprinter-v2\tests\test_config.py
Content:

--------------------------------------------------------------------------------

Filename: c:\Users\Marcos\dev\moneyprinter-v2\tests\test_database_helper.py
Content:
import unittest
from scripts.database_helper import create_database, mark_news_as_sent, is_news_sent
import sqlite3
import os

class TestDatabaseHelper(unittest.TestCase):

    def setUp(self):
        self.db_path = 'test_news_sent.db'
        create_database(self.db_path)
        self.conn = sqlite3.connect(self.db_path)
        self.cursor = self.conn.cursor()

    def tearDown(self):
        # Verifica se o cursor e a conexão estão abertos antes de fechá-los
        if self.cursor:
            try:
                self.cursor.close()
            except sqlite3.ProgrammingError:
                pass  # O cursor já foi fechado
        if self.conn:
            try:
                self.conn.close()
            except sqlite3.ProgrammingError:
                pass  # A conexão já foi fechada
        try:
            os.remove(self.db_path)
        except PermissionError:
            pass

    def test_mark_news_as_sent(self):
        guid = "test_guid"
        mark_news_as_sent(guid, self.db_path)
        # Fechar conexão antes de reabrir
        if self.conn:
            self.conn.close()
        self.conn = sqlite3.connect(self.db_path)  # Reabra a conexão para verificar
        self.cursor = self.conn.cursor()
        self.cursor.execute("SELECT * FROM news_sent WHERE guid=?", (guid,))
        result = self.cursor.fetchone()
        self.assertIsNotNone(result)
        self.cursor.close()
        self.conn.close()

    def test_is_news_sent(self):
        guid = "test_guid"
        mark_news_as_sent(guid, self.db_path)
        # Fechar conexão antes de reabrir
        if self.conn:
            self.conn.close()
        self.assertTrue(is_news_sent(guid, self.db_path))
        self.assertFalse(is_news_sent("nonexistent_guid", self.db_path))

if __name__ == '__main__':
    unittest.main()

--------------------------------------------------------------------------------

Filename: c:\Users\Marcos\dev\moneyprinter-v2\tests\__init__.py
Content:

--------------------------------------------------------------------------------